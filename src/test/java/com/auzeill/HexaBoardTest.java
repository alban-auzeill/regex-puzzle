package com.auzeill;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

class HexaBoardTest {

  @Test
  void test_word_length() {
    var board = new HexaBoard(7);
    assertThat(board.cells(Direction.A_B, 1).length).isEqualTo(7);
    assertThat(board.cells(Direction.B_C, 2).length).isEqualTo(8);
    assertThat(board.cells(Direction.C_A, 6).length).isEqualTo(12);
    assertThat(board.cells(Direction.A_B, 7).length).isEqualTo(13);
    assertThat(board.cells(Direction.B_C, 6).length).isEqualTo(12);
    assertThat(board.cells(Direction.C_A, 12).length).isEqualTo(8);
    assertThat(board.cells(Direction.A_B, 13).length).isEqualTo(7);
  }

  @Test
  void test_text() {
    var board = new HexaBoard(7);
    assertThat(board.text(Direction.A_B)).hasToString("""
                              (01,01) (01,02) (01,03) (01,04) (01,05) (01,06) (01,07)
                          (02,01) (02,02) (02,03) (02,04) (02,05) (02,06) (02,07) (02,08)
                      (03,01) (03,02) (03,03) (03,04) (03,05) (03,06) (03,07) (03,08) (03,09)
                  (04,01) (04,02) (04,03) (04,04) (04,05) (04,06) (04,07) (04,08) (04,09) (04,10)
              (05,01) (05,02) (05,03) (05,04) (05,05) (05,06) (05,07) (05,08) (05,09) (05,10) (05,11)
          (06,01) (06,02) (06,03) (06,04) (06,05) (06,06) (06,07) (06,08) (06,09) (06,10) (06,11) (06,12)
      (07,01) (07,02) (07,03) (07,04) (07,05) (07,06) (07,07) (07,08) (07,09) (07,10) (07,11) (07,12) (07,13)
          (08,01) (08,02) (08,03) (08,04) (08,05) (08,06) (08,07) (08,08) (08,09) (08,10) (08,11) (08,12)
              (09,01) (09,02) (09,03) (09,04) (09,05) (09,06) (09,07) (09,08) (09,09) (09,10) (09,11)
                  (10,01) (10,02) (10,03) (10,04) (10,05) (10,06) (10,07) (10,08) (10,09) (10,10)
                      (11,01) (11,02) (11,03) (11,04) (11,05) (11,06) (11,07) (11,08) (11,09)
                          (12,01) (12,02) (12,03) (12,04) (12,05) (12,06) (12,07) (12,08)
                              (13,01) (13,02) (13,03) (13,04) (13,05) (13,06) (13,07)
      """);
    assertThat(board.text(Direction.B_C)).hasToString("""
                              (13,01) (12,01) (11,01) (10,01) (09,01) (08,01) (07,01)
                          (13,02) (12,02) (11,02) (10,02) (09,02) (08,02) (07,02) (06,01)
                      (13,03) (12,03) (11,03) (10,03) (09,03) (08,03) (07,03) (06,02) (05,01)
                  (13,04) (12,04) (11,04) (10,04) (09,04) (08,04) (07,04) (06,03) (05,02) (04,01)
              (13,05) (12,05) (11,05) (10,05) (09,05) (08,05) (07,05) (06,04) (05,03) (04,02) (03,01)
          (13,06) (12,06) (11,06) (10,06) (09,06) (08,06) (07,06) (06,05) (05,04) (04,03) (03,02) (02,01)
      (13,07) (12,07) (11,07) (10,07) (09,07) (08,07) (07,07) (06,06) (05,05) (04,04) (03,03) (02,02) (01,01)
          (12,08) (11,08) (10,08) (09,08) (08,08) (07,08) (06,07) (05,06) (04,05) (03,04) (02,03) (01,02)
              (11,09) (10,09) (09,09) (08,09) (07,09) (06,08) (05,07) (04,06) (03,05) (02,04) (01,03)
                  (10,10) (09,10) (08,10) (07,10) (06,09) (05,08) (04,07) (03,06) (02,05) (01,04)
                      (09,11) (08,11) (07,11) (06,10) (05,09) (04,08) (03,07) (02,06) (01,05)
                          (08,12) (07,12) (06,11) (05,10) (04,09) (03,08) (02,07) (01,06)
                              (07,13) (06,12) (05,11) (04,10) (03,09) (02,08) (01,07)
      """);
  }

  @Test
  void test_alternatives() {
    var board = new HexaBoard(7);
    assertThat(board.alternativesText(Direction.A_B)).hasToString("""
                  026 026 026 026 026 026 026
                026 026 026 026 026 026 026 026
              026 026 026 026 026 026 026 026 026
            026 026 026 026 026 026 026 026 026 026
          026 026 026 026 026 026 026 026 026 026 026
        026 026 026 026 026 026 026 026 026 026 026 026
      026 026 026 026 026 026 026 026 026 026 026 026 026
        026 026 026 026 026 026 026 026 026 026 026 026
          026 026 026 026 026 026 026 026 026 026 026
            026 026 026 026 026 026 026 026 026 026
              026 026 026 026 026 026 026 026 026
                026 026 026 026 026 026 026 026
                  026 026 026 026 026 026 026
      """);
  }

}
